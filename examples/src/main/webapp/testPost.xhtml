<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html  xmlns="http://www.w3.org/1999/xhtml"
    xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
    xmlns:f="http://xmlns.jcp.org/jsf/core"
    xmlns:h="http://xmlns.jcp.org/jsf/html"
    xmlns:c="http://xmlns.jcp.org/jsp/jstl/core"
    xmlns:ma="http://myfaces.apache.org/actions"
    xmlns:jsf="http://xmlns.jcp.org/jsf"
    xmlns:fn="http://xmlns.jcp.org/jsp/jstl/functions">
<!--
    Licensed to the Apache Software Foundation (ASF) under one
    or more contributor license agreements.  See the NOTICE file
    distributed with this work for additional information
    regarding copyright ownership.  The ASF licenses this file
    to you under the Apache License, Version 2.0 (the
    "License"); you may not use this file except in compliance
    with the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.
-->
<head>
</head>
<body>
<ui:composition template="/META-INF/templates/example.xhtml">
  <ui:define name="header">
      <h1><h:outputText value="#{msgs['title']}"/></h1>
      <h2>Test POST/JSON Response using JQuery and JSF</h2>
      <h:outputScript library="jquery" name="jquery-1.10.2.js" target="head"/>
      <h:outputScript library="jquery" name="jquery-ui-1.10.4.js" target="head"/>
      <h:outputStylesheet library="jquery" name="jquery-ui-1.10.4.css"/>
  </ui:define>
  <ui:define name="content">
  
    <p>This example shows how to define an action that can be associated
    to a JSON response, which is defined into a managed bean. The idea is
    allow the user to control how the request is build using jQuery or
    whatever javascript library, but keep things working inside JSF.</p>

    <p>In this case, the action is defined with a component called
    &lt;ma:defineAction ... &gt; and then an EL expression to get the
    url and incrust it into the javascript called ma:sourceActionURL(...).</p>
      
    <p>This is helpful when you want to do some action that affects the values
    in the managed beans but the view state remains without change. Please note
    view scope is part of the view (just the view scope id), so if a view scope
    bean is created by a side effect of the action and the view scope doesn't
    exists before that, on client side state saving the bean will not be
    stored, because the id will not be updated in the view state token. But
    all other contextual scopes will work well, so it is a viable approach.</p>
    
    <p>The ideal in this part is have something mixed between ajax and 
    javascript, but to do that it is necessary to define a javascript function 
    to call and it is also required that the function can be added a callback.</p>
      
    <p>The action url uses an special query parameter "oamva" to indicate that the
    action is not a normal view processing, but an special action processing.</p>

    <form jsf:id="form1">

        <input jsf:id="suggest" type="text" jsf:value="#{jsonBean.value}"/>
        
        <ma:defineAction id="renderOptions" 
                         action="#{jsonBean.renderJSONForAutoComplete}"
                         execute="@form">
        </ma:defineAction>
    
        <script type="text/javascript">
        $(document.getElementById("#{ma:clientId('suggest')}")).autocomplete({
            source: function (request, response) {
                $.post( "#{ma:sourceActionURL('renderOptions')}" , 
                $(document.getElementById("#{ma:parentFormId()}")).serialize(), response);
            }
        });
        </script>

    </form>

<!--
        $(document.getElementById("{ma:clientId('suggest')}")).autocomplete({
            source: function (request, response) {
                $.post( "{ma:sourceActionURL('action1')}" , 
                { term : request.term , 
                  'javax.faces.ViewState' : $("input:hidden[name='javax.faces.ViewState']").val()
                } , response);
            }
        });
-->

  </ui:define>
</ui:composition>
</body>
</html>